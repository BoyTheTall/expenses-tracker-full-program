# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TransactionsUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Transaction, messages

class Ui_MainWindow(object):
    t_services = Transaction.transaction_services()
    transactions = [] #the length is used to check if it is empty or not through out this file
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1069, 660)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget_3.setGeometry(QtCore.QRect(10, 0, 1051, 601))
        self.formLayoutWidget_3.setObjectName("formLayoutWidget_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.formLayoutWidget_3)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.radSpecificDate = QtWidgets.QRadioButton(self.formLayoutWidget_3)
        self.radSpecificDate.setMaximumSize(QtCore.QSize(200, 16777215))
        self.radSpecificDate.setObjectName("radSpecificDate")
        self.gridLayout_2.addWidget(self.radSpecificDate, 13, 2, 1, 1)
        self.lblYear = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblYear.setObjectName("lblYear")
        self.gridLayout_2.addWidget(self.lblYear, 5, 0, 1, 1)
        self.txtYear = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.txtYear.setMaximumSize(QtCore.QSize(150, 16777215))
        self.txtYear.setObjectName("txtYear")
        self.gridLayout_2.addWidget(self.txtYear, 5, 2, 1, 1)
        self.btnSearch_2 = QtWidgets.QPushButton(self.formLayoutWidget_3)
        self.btnSearch_2.setMaximumSize(QtCore.QSize(250, 16777215))
        self.btnSearch_2.setObjectName("btnSearch_2")
        self.gridLayout_2.addWidget(self.btnSearch_2, 10, 6, 1, 1)
        self.chkboxCategory = QtWidgets.QCheckBox(self.formLayoutWidget_3)
        self.chkboxCategory.setMaximumSize(QtCore.QSize(100, 16777215))
        self.chkboxCategory.setObjectName("chkboxCategory")
        self.gridLayout_2.addWidget(self.chkboxCategory, 12, 2, 1, 1)
        self.dtSpecificDate = QtWidgets.QDateEdit(self.formLayoutWidget_3)
        self.dtSpecificDate.setMaximumSize(QtCore.QSize(150, 16777215))
        self.dtSpecificDate.setObjectName("dtSpecificDate")
        self.gridLayout_2.addWidget(self.dtSpecificDate, 2, 2, 1, 1)
        self.cmbTransactionType = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.cmbTransactionType.setMaximumSize(QtCore.QSize(100, 16777215))
        self.cmbTransactionType.setObjectName("cmbTransactionType")
        self.gridLayout_2.addWidget(self.cmbTransactionType, 1, 2, 1, 1)
        self.lblSearchBy = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblSearchBy.setObjectName("lblSearchBy")
        self.gridLayout_2.addWidget(self.lblSearchBy, 10, 0, 1, 1)
        self.cmbCategory = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.cmbCategory.setMaximumSize(QtCore.QSize(100, 16777215))
        self.cmbCategory.setObjectName("cmbCategory")
        self.gridLayout_2.addWidget(self.cmbCategory, 0, 2, 1, 1)
        self.lblTransactionType = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblTransactionType.setObjectName("lblTransactionType")
        self.gridLayout_2.addWidget(self.lblTransactionType, 1, 0, 1, 1)
        self.cmbMonth = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.cmbMonth.setMaximumSize(QtCore.QSize(150, 16777215))
        self.cmbMonth.setObjectName("cmbMonth")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.cmbMonth.addItem("")
        self.gridLayout_2.addWidget(self.cmbMonth, 3, 2, 1, 1)
        self.chkboxTransactionType = QtWidgets.QCheckBox(self.formLayoutWidget_3)
        self.chkboxTransactionType.setMaximumSize(QtCore.QSize(150, 16777215))
        self.chkboxTransactionType.setObjectName("chkboxTransactionType")
        self.gridLayout_2.addWidget(self.chkboxTransactionType, 10, 2, 1, 1)
        self.lblMonth = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblMonth.setObjectName("lblMonth")
        self.gridLayout_2.addWidget(self.lblMonth, 3, 0, 1, 1)
        self.lblCategory = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblCategory.setObjectName("lblCategory")
        self.gridLayout_2.addWidget(self.lblCategory, 0, 0, 1, 1)
        self.lblDate = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblDate.setObjectName("lblDate")
        self.gridLayout_2.addWidget(self.lblDate, 2, 0, 1, 1)
        self.radMonthYear = QtWidgets.QRadioButton(self.formLayoutWidget_3)
        self.radMonthYear.setObjectName("radMonthYear")
        self.gridLayout_2.addWidget(self.radMonthYear, 14, 2, 1, 1)
        self.btnUpdate = QtWidgets.QPushButton(self.formLayoutWidget_3)
        self.btnUpdate.setObjectName("btnUpdate")
        self.gridLayout_2.addWidget(self.btnUpdate, 12, 6, 1, 1)
        self.btnDelete = QtWidgets.QPushButton(self.formLayoutWidget_3)
        self.btnDelete.setObjectName("btnDelete")
        self.gridLayout_2.addWidget(self.btnDelete, 13, 6, 1, 1)
        self.btnAddTransaction_2 = QtWidgets.QPushButton(self.formLayoutWidget_3)
        self.btnAddTransaction_2.setObjectName("btnAddTransaction_2")
        self.gridLayout_2.addWidget(self.btnAddTransaction_2, 14, 6, 1, 1)
        self.lblMode = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.lblMode.setObjectName("lblMode")
        self.gridLayout_2.addWidget(self.lblMode, 0, 6, 1, 1)
        self.cmbMode = QtWidgets.QComboBox(self.formLayoutWidget_3)
        self.cmbMode.setObjectName("cmbMode")
        self.cmbMode.addItem("")
        self.cmbMode.addItem("")
        self.gridLayout_2.addWidget(self.cmbMode, 1, 6, 1, 1)
        self.tblTransactions_2 = QtWidgets.QTableWidget(self.formLayoutWidget_3)
        self.tblTransactions_2.setObjectName("tblTransactions_2")
        self.tblTransactions_2.setColumnCount(0)
        self.tblTransactions_2.setRowCount(0)
        self.gridLayout_2.addWidget(self.tblTransactions_2, 9, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1069, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionReturn_to_Main_Menu = QtWidgets.QAction(MainWindow)
        self.actionReturn_to_Main_Menu.setObjectName("actionReturn_to_Main_Menu")
        self.actionView_Total_Amount_in_Expenses = QtWidgets.QAction(MainWindow)
        self.actionView_Total_Amount_in_Expenses.setObjectName("actionView_Total_Amount_in_Expenses")
        self.actionView_Total_Amount_in_Income = QtWidgets.QAction(MainWindow)
        self.actionView_Total_Amount_in_Income.setObjectName("actionView_Total_Amount_in_Income")
        self.menuMenu.addAction(self.actionReturn_to_Main_Menu)
        self.menuMenu.addAction(self.actionView_Total_Amount_in_Expenses)
        self.menuMenu.addAction(self.actionView_Total_Amount_in_Income)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        #added by me
        self.prepare_table()
        self.transactions = self.t_services.getExpenses()
        self.populate_table(self.transactions)
        self.btnSearch_2.clicked.connect(self.btnSearch_funtion)
        self.cmbTransactionType.addItems(["expense", "income"])
        self.cmbMode.activated.connect(self.mode_selection)
        self.btnAddTransaction_2.clicked.connect(self.btnAdd_function)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.radSpecificDate.setText(_translate("MainWindow", "Specific Date"))
        self.lblYear.setText(_translate("MainWindow", "Year"))
        self.btnSearch_2.setText(_translate("MainWindow", "Search"))
        self.chkboxCategory.setText(_translate("MainWindow", "Category"))
        self.dtSpecificDate.setDisplayFormat(_translate("MainWindow", "dd-mm-yyyy"))
        self.lblSearchBy.setText(_translate("MainWindow", "Search By:"))
        self.lblTransactionType.setText(_translate("MainWindow", "Transaction Type"))
        self.cmbMonth.setItemText(0, _translate("MainWindow", "January"))
        self.cmbMonth.setItemText(1, _translate("MainWindow", "February"))
        self.cmbMonth.setItemText(2, _translate("MainWindow", "March"))
        self.cmbMonth.setItemText(3, _translate("MainWindow", "April"))
        self.cmbMonth.setItemText(4, _translate("MainWindow", "May"))
        self.cmbMonth.setItemText(5, _translate("MainWindow", "June"))
        self.cmbMonth.setItemText(6, _translate("MainWindow", "July"))
        self.cmbMonth.setItemText(7, _translate("MainWindow", "August"))
        self.cmbMonth.setItemText(8, _translate("MainWindow", "September"))
        self.cmbMonth.setItemText(9, _translate("MainWindow", "October"))
        self.cmbMonth.setItemText(10, _translate("MainWindow", "November"))
        self.cmbMonth.setItemText(11, _translate("MainWindow", "December"))
        self.chkboxTransactionType.setText(_translate("MainWindow", "Transaction Type"))
        self.lblMonth.setText(_translate("MainWindow", "Month"))
        self.lblCategory.setText(_translate("MainWindow", "Category"))
        self.lblDate.setText(_translate("MainWindow", "Date (dd-mm-yyyy)"))
        self.radMonthYear.setText(_translate("MainWindow", "Month and Year"))
        self.btnUpdate.setText(_translate("MainWindow", "Update"))
        self.btnDelete.setText(_translate("MainWindow", "Delete"))
        self.btnAddTransaction_2.setText(_translate("MainWindow", "Add"))
        self.lblMode.setText(_translate("MainWindow", "Mode"))
        self.cmbMode.setItemText(0, _translate("MainWindow", "View/Update/Delete"))
        self.cmbMode.setItemText(1, _translate("MainWindow", "Add Transaction"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.actionReturn_to_Main_Menu.setText(_translate("MainWindow", "Return to Main Menu"))
        self.actionView_Total_Amount_in_Expenses.setText(_translate("MainWindow", "View Total Amount in Expenses"))
        self.actionView_Total_Amount_in_Income.setText(_translate("MainWindow", "View Total Amount in Income"))

        
    def prepare_table(self):
        self.tblTransactions_2.setColumnCount(5)
        self.tblTransactions_2.setHorizontalHeaderLabels(["Transaction_ID", "Transaction Type", "Date", "Category", "Amount"])
        for i in range(0, 5):
            self.tblTransactions_2.setColumnWidth(i, 164)

            
    def populate_table(self, transactions_arr):
        self.tblTransactions_2.setRowCount(0)#clearing the table
        t_list = list(transactions_arr)
        for i in range(0, len(transactions_arr)):
            self.tblTransactions_2.insertRow(i)

            self.tblTransactions_2.setItem(i, 0, QtWidgets.QTableWidgetItem(str(t_list[i].getTransactionId())))
            self.tblTransactions_2.setItem(i, 1, QtWidgets.QTableWidgetItem(t_list[i].getTransactionType()))
            self.tblTransactions_2.setItem(i, 2, QtWidgets.QTableWidgetItem(t_list[i].getDate()))
            self.tblTransactions_2.setItem(i, 3, QtWidgets.QTableWidgetItem(t_list[i].getCategory()))
            self.tblTransactions_2.setItem(i, 4, QtWidgets.QTableWidgetItem(str(t_list[i].getAmount())))

            
    def add_transactions(self):
        transactions_to_be_added = self.getTransactions_from_table()
        
        if(len(transactions_to_be_added) == 0):
            message = "There are no transactions entered. Please enter at least one transaction"
            title = "Error :("
            messages.display_message(message, title, messages.ERROR_MSG)
        
        else:
            message = """Are you sure you want to add these?, Please Make sure all details are correct
                        searching by criteria  just to fix one is gonna be a pain unless you know the transaction ID"""
            title = "Mmmmmmm"
            add_transactions_to_database = messages.display_option_message(message, title)
            if (add_transactions_to_database == True):
                for i in range(0, len(transactions_to_be_added)):
                    self.t_services.add_transaction(transactions_to_be_added[i])
                message = "Transactions added successfully"
                title = "yay :)"
                messages.display_message(message, title, messages.INFO_MSG)
            else:
                message = "Do you wish to restore the previous list of transactions?"
                title = "Do you though?"
                restore_flag = messages.display_option_message(message, title)
                if restore_flag ==  True:
                    self.populate_table(self.transactions)
                else:
                    self.clear_table()

   
    def getTransactions_from_table(self):
        
        number_of_transactions = self.tblTransactions_2.rowCount()
        transactions = []
        for i in range(0, number_of_transactions):
            transaction_id = str(self.tblTransactions_2.item(i, 0))
            transaction_type = str(self.tblTransactions_2.item(i, 1))
            t_date = str(self.tblTransactions_2.item(i, 2))
            category = str(self.tblTransactions_2.item(i, 3))
            amount = float(self.tblTransactions_2.item(i, 4))
            transaction_t = Transaction.transaction(transaction_id, amount, category, transaction_type, t_date)
            transactions.append(transaction_t)
            
        return transactions

                
    def fetch_transactions(self):
        search_by_category = self.chkboxCategory.isChecked()
        search_by_transaction_type = self.chkboxTransactionType.isChecked()
        search_by_specific_date = self.radSpecificDate.isChecked()
        search_by_month_and_year = self.radMonthYear.isChecked()
        
        t_id = None
        date = None
        category = None
        t_type = None
        
        if search_by_category == True:
            category = self.cmbCategory.currentText()
        if search_by_transaction_type == True:
            t_type = self.cmbTransactionType.currentText()
        if search_by_specific_date ==True:
            date = self.dtSpecificDate.text()
        if search_by_month_and_year == True:
            date = self.cmbMonth.text() + '-' + self.txtYear.text()
        
        self.transactions = self.t_services.getTransactions(t_id, date, category, t_type)
        if(len(self.transactions) >= 1):
            self.tblTransactions_2.setRowCount(0)
            self.populate_table(self.transactions)
        else:
            message = "No Transactions that meet the search criteria were found"
            title = "Operation Failed"
            messages.display_message(message, title, messages.ERROR_MSG)

    
    def clear_table(self):
        self.tblTransactions_2.setRowCount(0)

    
    def mode_selection(self):
        if self.cmbMode.currentText() == "Add Transaction":
            self.clear_table()        
            self.btnSearch_2.setText("Insert New Blank Row")
            self.btnUpdate.setText("Clear Current Row")
            self.btnDelete.setText("Delete Row")
            
                     
        else:
            self.btnSearch_2.setText("Search")
            self.btnUpdate.setText("Update")
            self.btnDelete.setText("Delete")
            
            message = "Do you want to load the previous transactions?"
            title = "Load Previous Transactions"
            
            if len(self.transactions) >= 1:
                r = messages.display_option_message(message, title, messages.INFO_MSG)
                if r == True:
                    self.populate_table(self.transactions)


    def btnSearch_funtion(self):
        if self.cmbMode.currentText() == "Add Transaction":
            #in this case the button will be in insert empty row mode
            position = self.tblTransactions_2.rowCount()
            self.tblTransactions_2.insertRow(position)
            self.tblTransactions_2.setItem(position, 0, QtWidgets.QTableWidgetItem(str(Transaction.generate_ID())))
        else:
            #button will be in search mode
            self.fetch_transactions()

    def btnAdd_function(self):
        if self.cmbMode.currentText() == "Add Transaction":
            self.add_transactions()
        
        else:
            message = "Functionality of this button is disabled in this mode"
            title = "oopsie *_*"
            messages.display_message(message, title, messages.INFO_MSG)
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
